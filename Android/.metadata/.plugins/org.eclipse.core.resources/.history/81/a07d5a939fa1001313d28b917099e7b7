package com.swq.disastermonitoring;

import android.os.IBinder;
import android.app.Activity;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.content.SharedPreferences;
import java.lang.Thread;

public class AccelerometerService extends Service implements SensorEventListener {

	private SensorManager sensorManager;
	public double accelervalue;
	public int countNum;
	private SharedPreferences preferences;
	private String userId;
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}

	
	@Override
	public void onCreate()
	{
		super.onCreate();
		System.out.println("AccelerometerService is Created");
		accelervalue=0;
		countNum=0;
	    preferences=getSharedPreferences("PRIVATE",Activity.MODE_PRIVATE);
	    userId=preferences.getString("Serial_Number", "unknow");
		sensorManager=(SensorManager)getSystemService(Context.SENSOR_SERVICE);
	}
	
	@Override
	public int onStartCommand(Intent intent,int flags,int startId)
	{
		super.onStartCommand(intent, flags, startId);
		sensorManager.registerListener(this, 
				sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
				SensorManager.SENSOR_DELAY_UI);
		System.out.println("LocationService is Started");
		return START_STICKY;
	}
	
	@Override
	public void onDestroy()
	{
		super.onDestroy();
		sensorManager.unregisterListener(this);
		System.out.println("LocationService is Destroyed");
	}
	
	@Override
	public void onAccuracyChanged(Sensor arg0, int arg1) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		float[] values=event.values;
		double  a=java.lang.Math.sqrt(values[0]*values[0]+values[1]*values[1]+values[2]*values[2]);
		accelervalue+=a;
		countNum++;
		if(countNum>=500)
		{
			sensorManager.unregisterListener(this);
			NetThread net = new NetThread(accelervalue/countNum,
					0, userId);
			new Thread(net).start();
			try
			{
			Thread.sleep(1000);
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			sensorManager.registerListener(this, 
					sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
					SensorManager.SENSOR_DELAY_UI);
		}
	}

}
